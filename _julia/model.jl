#= 
    This code was generated by heta-compiler 0.6.8
    
=#

__platform__ = (function()

### create default constants
nameless_constants_num_ = NamedTuple{(
  :pH_i,:pH_o,:pH_uM_factor,:fi,:K_t_mg,:K_th_mg,:K_d_mg,:K_dh_mg,:K_t_h,:K_d_h,:del_D,:del_T,:k1_ANT,:k2_ANT,:k3_ANT,:k4_ANT,:K_D_o_ANT,:K_T_o_ANT,:A,:B,:C,:mV_factor,
)}(Float64[
  7.8,7.2,1000000,6.9,101,10616,901,38168,0.323,0.445,0,0.07,35,10.8,21,29,51,57,0.268,-0.205,0.187,26.5,
])

### create default observables
nameless_records_output_ = NamedTuple{(
  :vol_in,:vol_out,:T_i,:D_i,:T_o,:D_o,:Mg_i,:Mg_o,:H_i,:H_o,:T_i_free,:T_o_free,:D_i_free,:D_o_free,:k1_ANT_fi,:k2_ANT_fi,:k3_ANT_fi,:k4_ANT_fi,:K_D_o_ANT_fi,:K_T_o_ANT_fi,:q_fi,:ch,:zn,:v1_ANT,:ch2,:v2_ANT,:x1,:x2,:ch3,:zn3,:v3_ANT,:Vm_T,:ch4,:v4_ANT,:Vm_D,:ch_obm,:v_obm_ANT,:ff,
)}(Bool[
  false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,true,false,true,false,false,false,false,true,false,false,true,false,false,false,false,
])

### create default events
nameless_events_active_ = NamedTuple{(
  
)}(Bool[
  
])

### initialization of ODE variables and Records
function nameless_init_func_(cons)
    #(pH_i,pH_o,pH_uM_factor,fi,K_t_mg,K_th_mg,K_d_mg,K_dh_mg,K_t_h,K_d_h,del_D,del_T,k1_ANT,k2_ANT,k3_ANT,k4_ANT,K_D_o_ANT,K_T_o_ANT,A,B,C,mV_factor,) = cons

    # Heta initialize
    t = 0.0 # initial time
    vol_in = 1.0
    vol_out = 1.0
    k1_ANT_fi = cons[13] * exp((cons[19] * (-4.0) + cons[20] * (-4.0) + cons[21]) * cons[4])
    T_i = 10000
    Mg_i = 0.0
    H_i = exp(-cons[1] * log(10.0)) * cons[3]
    T_i_free = T_i / (1.0 + Mg_i / cons[5] + H_i / cons[9] + Mg_i * H_i / cons[6] / cons[9])
    T_o = 288.1
    Mg_o = 0.0
    H_o = exp(-cons[2] * log(10.0)) * cons[3]
    T_o_free = T_o / (1.0 + Mg_o / cons[5] + H_o / cons[9] + Mg_o * H_o / cons[6] / cons[9])
    k3_ANT_fi = cons[15] * exp((cons[19] * (-4.0) + cons[20] * (-3.0) + cons[21]) * cons[4])
    K_D_o_ANT_fi = cons[17] * exp(3.0 * cons[11] * cons[4])
    k2_ANT_fi = cons[14] * exp((cons[19] * (-3.0) + cons[20] * (-4.0) + cons[21]) * cons[4])
    K_T_o_ANT_fi = cons[18] * exp(4.0 * cons[12] * cons[4])
    q_fi = k3_ANT_fi * K_D_o_ANT_fi * exp(cons[4]) / (k2_ANT_fi * K_T_o_ANT_fi)
    D_o = 0.0
    D_o_free = D_o / (1.0 + Mg_o / cons[7] + H_o / cons[10] + Mg_o * H_o / cons[8] / cons[10])
    D_i = 0.0
    D_i_free = D_i / (1.0 + Mg_i / cons[7] + H_i / cons[10] + Mg_i * H_i / cons[8] / cons[10])
    k4_ANT_fi = cons[16] * exp((cons[19] * (-3.0) + cons[20] * (-3.0) + cons[21]) * cons[4])
    ch = k1_ANT_fi * T_i_free * T_o_free * q_fi / K_T_o_ANT_fi + k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi + k3_ANT_fi * D_i_free * T_o_free / K_T_o_ANT_fi + k4_ANT_fi * D_i_free * D_o_free / K_D_o_ANT_fi
    zn = (T_i_free * q_fi + D_i_free) * (1.0 + T_o_free / K_T_o_ANT_fi + D_o_free / K_D_o_ANT_fi)
    v1_ANT = ch / zn
    ch2 = k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi + k4_ANT_fi * D_i_free * D_o_free / K_D_o_ANT_fi
    v2_ANT = ch2 / zn
    x1 = T_o / (1.0 + Mg_o / cons[5] + H_o / cons[9] + Mg_o * H_o / (cons[6] * cons[9]))
    ch3 = k1_ANT_fi * T_i_free * x1 * q_fi / K_T_o_ANT_fi + k3_ANT_fi * D_i_free * x1 / K_T_o_ANT_fi
    x2 = T_o / (1.0 + Mg_o / cons[7] + H_o / cons[10] + Mg_o * H_o / (cons[8] * cons[10]))
    zn3 = (T_i_free * q_fi + D_i_free) * (1.0 + x1 / K_T_o_ANT_fi + x2 / K_D_o_ANT_fi)
    v3_ANT = ch3 / zn3
    Vm_T = ((k1_ANT_fi * T_i_free * q_fi + k3_ANT_fi * D_i_free) / (T_i_free * q_fi + D_i_free)) * (1.0 / (1.0 + K_T_o_ANT_fi / K_D_o_ANT_fi))
    ch4 = k2_ANT_fi * T_i_free * x2 * q_fi / K_D_o_ANT_fi + k4_ANT_fi * D_i_free * x2 / K_D_o_ANT_fi
    v4_ANT = ch4 / zn3
    Vm_D = ((k2_ANT_fi * T_i_free * q_fi + k4_ANT_fi * D_i_free) / (T_i_free * q_fi + D_i_free)) * (1.0 / (1.0 + K_D_o_ANT_fi / K_T_o_ANT_fi))
    ch_obm = k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi - k3_ANT_fi * D_i_free * T_o_free / K_T_o_ANT_fi
    v_obm_ANT = ch_obm / zn
    ff = cons[4] * cons[22]
    
    # save results

    return ([ 0.0 ], # init for fake variable
        Float64[
            vol_in,
            vol_out,
            T_i*vol_in,
            D_i*vol_in,
            T_o*vol_out,
            D_o*vol_out,
            Mg_i*vol_in,
            Mg_o*vol_out,
        ]
    )
end

### calculate RHS of ODE
function nameless_ode_func_(du, u, p, t)
    cons = p.constants
    (vol_in,vol_out,T_i_,D_i_,T_o_,D_o_,Mg_i_,Mg_o_,) = p.static
    () = u 

    # Heta rules
    k1_ANT_fi = cons[13] * exp((cons[19] * (-4.0) + cons[20] * (-4.0) + cons[21]) * cons[4])
    T_i = T_i_ / vol_in
    Mg_i = Mg_i_ / vol_in
    H_i = exp(-cons[1] * log(10.0)) * cons[3]
    T_i_free = T_i / (1.0 + Mg_i / cons[5] + H_i / cons[9] + Mg_i * H_i / cons[6] / cons[9])
    T_o = T_o_ / vol_out
    Mg_o = Mg_o_ / vol_out
    H_o = exp(-cons[2] * log(10.0)) * cons[3]
    T_o_free = T_o / (1.0 + Mg_o / cons[5] + H_o / cons[9] + Mg_o * H_o / cons[6] / cons[9])
    k3_ANT_fi = cons[15] * exp((cons[19] * (-4.0) + cons[20] * (-3.0) + cons[21]) * cons[4])
    K_D_o_ANT_fi = cons[17] * exp(3.0 * cons[11] * cons[4])
    k2_ANT_fi = cons[14] * exp((cons[19] * (-3.0) + cons[20] * (-4.0) + cons[21]) * cons[4])
    K_T_o_ANT_fi = cons[18] * exp(4.0 * cons[12] * cons[4])
    q_fi = k3_ANT_fi * K_D_o_ANT_fi * exp(cons[4]) / (k2_ANT_fi * K_T_o_ANT_fi)
    D_o = D_o_ / vol_out
    D_o_free = D_o / (1.0 + Mg_o / cons[7] + H_o / cons[10] + Mg_o * H_o / cons[8] / cons[10])
    D_i = D_i_ / vol_in
    D_i_free = D_i / (1.0 + Mg_i / cons[7] + H_i / cons[10] + Mg_i * H_i / cons[8] / cons[10])
    k4_ANT_fi = cons[16] * exp((cons[19] * (-3.0) + cons[20] * (-3.0) + cons[21]) * cons[4])
    @show T_i
    @show D_i
    ch = k1_ANT_fi * T_i_free * T_o_free * q_fi / K_T_o_ANT_fi + k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi + k3_ANT_fi * D_i_free * T_o_free / K_T_o_ANT_fi + k4_ANT_fi * D_i_free * D_o_free / K_D_o_ANT_fi
    
    zn = (T_i_free * q_fi + D_i_free) * (1.0 + T_o_free / K_T_o_ANT_fi + D_o_free / K_D_o_ANT_fi)
    
    v1_ANT = ch / zn
    
    ch2 = k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi + k4_ANT_fi * D_i_free * D_o_free / K_D_o_ANT_fi
    v2_ANT = ch2 / zn
    x1 = T_o / (1.0 + Mg_o / cons[5] + H_o / cons[9] + Mg_o * H_o / (cons[6] * cons[9]))
    ch3 = k1_ANT_fi * T_i_free * x1 * q_fi / K_T_o_ANT_fi + k3_ANT_fi * D_i_free * x1 / K_T_o_ANT_fi
    x2 = T_o / (1.0 + Mg_o / cons[7] + H_o / cons[10] + Mg_o * H_o / (cons[8] * cons[10]))
    zn3 = (T_i_free * q_fi + D_i_free) * (1.0 + x1 / K_T_o_ANT_fi + x2 / K_D_o_ANT_fi)
    v3_ANT = ch3 / zn3
    Vm_T = ((k1_ANT_fi * T_i_free * q_fi + k3_ANT_fi * D_i_free) / (T_i_free * q_fi + D_i_free)) * (1.0 / (1.0 + K_T_o_ANT_fi / K_D_o_ANT_fi))
    ch4 = k2_ANT_fi * T_i_free * x2 * q_fi / K_D_o_ANT_fi + k4_ANT_fi * D_i_free * x2 / K_D_o_ANT_fi
    v4_ANT = ch4 / zn3
    Vm_D = ((k2_ANT_fi * T_i_free * q_fi + k4_ANT_fi * D_i_free) / (T_i_free * q_fi + D_i_free)) * (1.0 / (1.0 + K_D_o_ANT_fi / K_T_o_ANT_fi))
    ch_obm = k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi - k3_ANT_fi * D_i_free * T_o_free / K_T_o_ANT_fi
    v_obm_ANT = ch_obm / zn
    ff = cons[4] * cons[22]
    
    #p.static .= [vol_in,vol_out,T_i_,D_i_,T_o_,D_o_,Mg_i_,Mg_o_,]
    du .= [ 1.0 ] # RHS for fake variable
end

### output function
function nameless_saving_generator_(outputIds::Vector{Symbol})
    function saving_(u, t, integrator)
        cons = integrator.p.constants
        (vol_in,vol_out,T_i_,D_i_,T_o_,D_o_,Mg_i_,Mg_o_,) = integrator.p.static
        () = u

        # Heta rules
        k1_ANT_fi = cons[13] * exp((cons[19] * (-4.0) + cons[20] * (-4.0) + cons[21]) * cons[4])
        T_i = T_i_ / vol_in
        Mg_i = Mg_i_ / vol_in
        H_i = exp(-cons[1] * log(10.0)) * cons[3]
        T_i_free = T_i / (1.0 + Mg_i / cons[5] + H_i / cons[9] + Mg_i * H_i / cons[6] / cons[9])
        T_o = T_o_ / vol_out
        Mg_o = Mg_o_ / vol_out
        H_o = exp(-cons[2] * log(10.0)) * cons[3]
        T_o_free = T_o / (1.0 + Mg_o / cons[5] + H_o / cons[9] + Mg_o * H_o / cons[6] / cons[9])
        k3_ANT_fi = cons[15] * exp((cons[19] * (-4.0) + cons[20] * (-3.0) + cons[21]) * cons[4])
        K_D_o_ANT_fi = cons[17] * exp(3.0 * cons[11] * cons[4])
        k2_ANT_fi = cons[14] * exp((cons[19] * (-3.0) + cons[20] * (-4.0) + cons[21]) * cons[4])
        K_T_o_ANT_fi = cons[18] * exp(4.0 * cons[12] * cons[4])
        q_fi = k3_ANT_fi * K_D_o_ANT_fi * exp(cons[4]) / (k2_ANT_fi * K_T_o_ANT_fi)
        D_o = D_o_ / vol_out
        D_o_free = D_o / (1.0 + Mg_o / cons[7] + H_o / cons[10] + Mg_o * H_o / cons[8] / cons[10])
        D_i = D_i_ / vol_in
        D_i_free = D_i / (1.0 + Mg_i / cons[7] + H_i / cons[10] + Mg_i * H_i / cons[8] / cons[10])
        k4_ANT_fi = cons[16] * exp((cons[19] * (-3.0) + cons[20] * (-3.0) + cons[21]) * cons[4])
        ch = k1_ANT_fi * T_i_free * T_o_free * q_fi / K_T_o_ANT_fi + k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi + k3_ANT_fi * D_i_free * T_o_free / K_T_o_ANT_fi + k4_ANT_fi * D_i_free * D_o_free / K_D_o_ANT_fi
        zn = (T_i_free * q_fi + D_i_free) * (1.0 + T_o_free / K_T_o_ANT_fi + D_o_free / K_D_o_ANT_fi)
        v1_ANT = ch / zn
        ch2 = k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi + k4_ANT_fi * D_i_free * D_o_free / K_D_o_ANT_fi
        v2_ANT = ch2 / zn
        x1 = T_o / (1.0 + Mg_o / cons[5] + H_o / cons[9] + Mg_o * H_o / (cons[6] * cons[9]))
        ch3 = k1_ANT_fi * T_i_free * x1 * q_fi / K_T_o_ANT_fi + k3_ANT_fi * D_i_free * x1 / K_T_o_ANT_fi
        x2 = T_o / (1.0 + Mg_o / cons[7] + H_o / cons[10] + Mg_o * H_o / (cons[8] * cons[10]))
        zn3 = (T_i_free * q_fi + D_i_free) * (1.0 + x1 / K_T_o_ANT_fi + x2 / K_D_o_ANT_fi)
        v3_ANT = ch3 / zn3
        Vm_T = ((k1_ANT_fi * T_i_free * q_fi + k3_ANT_fi * D_i_free) / (T_i_free * q_fi + D_i_free)) * (1.0 / (1.0 + K_T_o_ANT_fi / K_D_o_ANT_fi))
        ch4 = k2_ANT_fi * T_i_free * x2 * q_fi / K_D_o_ANT_fi + k4_ANT_fi * D_i_free * x2 / K_D_o_ANT_fi
        v4_ANT = ch4 / zn3
        Vm_D = ((k2_ANT_fi * T_i_free * q_fi + k4_ANT_fi * D_i_free) / (T_i_free * q_fi + D_i_free)) * (1.0 / (1.0 + K_D_o_ANT_fi / K_T_o_ANT_fi))
        ch_obm = k2_ANT_fi * T_i_free * D_o_free * q_fi / K_D_o_ANT_fi - k3_ANT_fi * D_i_free * T_o_free / K_T_o_ANT_fi
        v_obm_ANT = ch_obm / zn
        ff = cons[4] * cons[22]
        
        # force amount
        H_i_ = H_i*vol_in
        H_o_ = H_o*vol_out

        d = Base.@locals
        return [d[id] for id in outputIds]
    end
end

### TIME EVENTS ###

### D EVENTS ###

### STOP EVENTS ###

### event assignments


### MODELS ###

nameless_model_ = (
  nameless_init_func_,
  nameless_ode_func_,
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  NamedTuple{(
  )}([
  ]),
  nameless_saving_generator_,
  nameless_constants_num_,
  nameless_events_active_,
  nameless_records_output_
)

### OUTPUT ###

return (
  (
    nameless = nameless_model_,
  ),
  (),
  "0.6.8"
)

end
)()